/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

package com.amazon.corretto.hotpatch.patch.impl.log4j2;

import com.amazon.corretto.hotpatch.interfaces.Logger;
import com.amazon.corretto.hotpatch.org.objectweb.asm.ClassReader;
import com.amazon.corretto.hotpatch.org.objectweb.asm.ClassVisitor;
import com.amazon.corretto.hotpatch.org.objectweb.asm.ClassWriter;
import com.amazon.corretto.hotpatch.org.objectweb.asm.MethodVisitor;
import com.amazon.corretto.hotpatch.org.objectweb.asm.Opcodes;
import com.amazon.corretto.hotpatch.patch.ClassTransformerHotPatch;

/**
 * This is a small patch to the "org.apache.logging.log4j.core.lookup.JndiLookup" to ensure the lookup method always
 * returns a static String. This will cause the original jndi lookup message not to be logged. This is done to ensure
 * there is no risk of an unpatched JVM later processing the logs generated by this one and triggering the JNDI
 * connection to the attacking server.
 *
 * @see <a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228">CVE-2021-44228</a>
 * @see <a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45046">CVE-2021-45046</a>
 */
public class Log4j2NoJndiLookup implements ClassTransformerHotPatch {
    static final String CLASS_NAME = "org.apache.logging.log4j.core.lookup.JndiLookup";
    static final String CLASS_NAME_SLASH = CLASS_NAME.replace(".", "/");

    private final static String NAME = "Log4j2_NoJndiLookup";

    private Logger logger;

    @Override
    public String getName() {
        return NAME;
    }
    public String getDescription() {
        return "Fixes CVE-2021-44228 and CVE-2021-45046 by patching the method lookup of the JndiLookup class to always"
                + " return the static string \"Patched JndiLookup::lookup()\"";
    }

    @Override
    public boolean isTargetClass(String className) {
        return className.endsWith(CLASS_NAME)
                || className.endsWith(CLASS_NAME_SLASH);
    }

    @Override
    public byte[] apply(int asmApiVersion, String className, byte[] classfileBuffer, Logger logger) {
        this.logger = logger;
        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
        ClassVisitor cv = new NoJndiLookupClassVisitor(asmApiVersion, cw);
        ClassReader cr = new ClassReader(classfileBuffer);
        cr.accept(cv, 0);
        return cw.toByteArray();
    }

    public static class NoJndiLookupClassVisitor extends ClassVisitor {
        public NoJndiLookupClassVisitor(int asmApiVersion, ClassVisitor cv) {
            super(asmApiVersion, cv);
        }

        @Override
        public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
            MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);
            if ("lookup".equals(name)) {
                mv = new NoJndiLookupMethodVisitor(api, mv);
            }
            return mv;
        }
    }

    public static class NoJndiLookupMethodVisitor extends MethodVisitor implements Opcodes {

        public NoJndiLookupMethodVisitor(int asmApiVersion, MethodVisitor mv) {
            super(asmApiVersion, mv);
        }

        @Override
        public void visitCode() {
            mv.visitCode();
            mv.visitLdcInsn("Patched JndiLookup::lookup()");
            mv.visitInsn(ARETURN);
        }
    }
}